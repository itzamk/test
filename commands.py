#!/usr/bin/env python

import subprocess
import os

# Start the roscore
subprocess.Popen(['roscore'])

# Wait for roscore to start
rostopic_list_process = subprocess.Popen(['rostopic', 'list'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
rostopic_list_process.wait()

# Set the TURTLEBOT3_MODEL environment variable
os.environ['TURTLEBOT3_MODEL'] = 'waffle_pi'

# Launch the turtlebot3 world in Gazebo
subprocess.Popen(['roslaunch', 'turtlebot3_gazebo', 'turtlebot3_world.launch'])

# Launch the SLAM node for mapping
subprocess.Popen(['roslaunch', 'turtlebot3_slam', 'turtlebot3_slam.launch', 'slam_methods:=gmapping'])

# Launch the turtlebot3 simulation in Gazebo
subprocess.Popen(['roslaunch', 'turtlebot3_gazebo', 'turtlebot3_simulation.launch'])

# Save the map generated by SLAM
subprocess.Popen(['rosrun', 'map_server', 'map_saver', '-f', '~/map'])

# Terminate all running ROS nodes
subprocess.Popen(['rosnode', 'kill', '-a'])

# Set the TURTLEBOT3_MODEL environment variable again
os.environ['TURTLEBOT3_MODEL'] = 'waffle_pi'

# Launch the turtlebot3 world in Gazebo
subprocess.Popen(['roslaunch', 'turtlebot3_gazebo', 'turtlebot3_world.launch'])

# Launch the navigation node and load the saved map
subprocess.Popen(['roslaunch', 'turtlebot3_navigation', 'turtlebot3_navigation.launch', 'map_file:=$HOME/map.yaml'])
